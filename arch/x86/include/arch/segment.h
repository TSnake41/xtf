#ifndef XTF_X86_SEGMENT_H
#define XTF_X86_SEGMENT_H

#include <xtf/types.h>

#include <xen/arch-x86/xen.h>

/*
 * GDT layout:
 *
 * For simplicitly, the gdt is shared as much as possible between different
 * environments.
 *
 *  0 - null
 *  1 - 64bit supervisor code
 *  2 - 32bit supervisor code
 *  3 - 32bit supervisor data
 *  4 - 64bit userspace code
 *  5 - 32bit userspace code
 *  6 - 32bit userspace data
 *  7/8 - TSS (two slots in long mode)
 *  8 - DF TSS (32bit only)
 *
 *  9-14 - Available for test use
 */

#define GDTE_CS64_DPL0 1
#define GDTE_CS32_DPL0 2
#define GDTE_DS32_DPL0 3
#define GDTE_CS64_DPL3 4
#define GDTE_CS32_DPL3 5
#define GDTE_DS32_DPL3 6

#define GDTE_TSS 7
#define GDTE_TSS_DF 8

#define GDTE_AVAIL0     9
#define GDTE_AVAIL1    10
#define GDTE_AVAIL2    11
#define GDTE_AVAIL3    12
#define GDTE_AVAIL4    13
#define GDTE_AVAIL5    14

#define NR_GDT_ENTRIES 15

/*
 * HVM guests use the GDT directly.
 */
#if defined(CONFIG_HVM)

#ifdef __x86_64__

#define __KERN_CS   (GDTE_CS64_DPL0 * 8)
#define __KERN_DS   (0)
#define __KERN_CS32 (GDTE_CS32_DPL0 * 8)
#define __KERN_DS32 __KERN_DS

#define __USER_CS   (GDTE_CS64_DPL3 * 8 + 3)
#define __USER_DS   (GDTE_DS32_DPL3 * 8 + 3)
#define __USER_CS32 (GDTE_CS32_DPL3 * 8 + 3)
#define __USER_DS32 __USER_DS

#else /* __x86_64__ */

#define __KERN_CS   (GDTE_CS32_DPL0 * 8)
#define __KERN_DS   (GDTE_DS32_DPL0 * 8)
#define __KERN_CS32 __KERN_CS
#define __KERN_DS32 __KERN_DS

#define __USER_CS   (GDTE_CS32_DPL3 * 8 + 3)
#define __USER_DS   (GDTE_DS32_DPL3 * 8 + 3)
#define __USER_CS32 __USER_CS
#define __USER_DS32 __USER_DS

#endif /* __x86_64__ */

#define TSS_SEL     (GDTE_TSS * 8)

#endif /* CONFIG_HVM */

/*
 * PV guests by default use the Xen ABI-provided selectors.
 */
#if defined(CONFIG_PV)

#ifdef __x86_64__
/*
 * 64bit PV guest kernels run in cpl3, but exception frames generated by Xen
 * report cpl0 when interrupting kernel mode.  Trim the kernel selectors down
 * to rpl0 so they match the exception frames; Xen will take care of bumping
 * rpl back to 3 when required.
 *
 * In Long mode, it is permitted to have NULL selectors for the plain data
 * segment selectors (this is expressed in the Xen ABI), but not for %ss.  As
 * __{KERN,USER}_DS are used for all data selectors including %ss, use the
 * FLAT_RING3_SS64 rather than FLAT_RING3_DS64.
 */
#define __KERN_CS   (FLAT_RING3_CS64 & ~3)
#define __KERN_DS   (FLAT_RING3_SS64 & ~3)
#define __KERN_CS32 (FLAT_RING3_CS32 & ~3)
#define __KERN_DS32 __KERN_DS

#define __USER_CS   FLAT_RING3_CS64
#define __USER_DS   FLAT_RING3_SS64
#define __USER_CS32 FLAT_RING3_CS32
#define __USER_DS32 __USER_DS

#else /* __x86_64__ */

#define __KERN_CS   FLAT_RING1_CS
#define __KERN_DS   FLAT_RING1_DS
#define __KERN_CS32 __KERN_CS
#define __KERN_DS32 __KERN_DS

#define __USER_CS   FLAT_RING3_CS
#define __USER_DS   FLAT_RING3_DS
#define __USER_CS32 __USER_CS
#define __USER_DS32 __USER_DS

#endif /* __x86_64__ */

#endif /* CONFIG_PV */

#endif /* XTF_X86_SEGMENT_H */

/*
 * Local variables:
 * mode: C
 * c-file-style: "BSD"
 * c-basic-offset: 4
 * tab-width: 4
 * indent-tabs-mode: nil
 * End:
 */
